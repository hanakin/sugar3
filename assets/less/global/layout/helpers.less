/*------------------------------------*\
    $HELPERS
\*------------------------------------*/
/**
 * common classes that can be usesed to control the positioning of content
 */

/**
 * Floats Classes
 */
.clearfix           { .clearfix(); }
.center-block       { .center-block(); }
.pull-left          { float: left !important; }
.pull-right         { float: right !important; }

blockquote.pull-right {
    // ** Decoration ** \\
    border-left: 0;
    border-right: 5px solid @white-dark;
    // ** Layout ** \\
    padding-left: 0;
    p,
    small { text-align: right; }
    small {
        &:after { content: '\00A0 \2014'; } // NBSP, EM DASH
        &:before { content: ''; }
    }
}

/**
 * Alignment Classes
 */
.text-left          { text-align: left; }
.text-right         { text-align: right; }
.text-center        { text-align: center; }

/**
 * Image Classes
 */
.img-rounded        { border-radius: 6px; }
.img-circle         { border-radius: 50%; } // set radius in percents
.img-thumbnail {
    // ** Text ** \\
    .line-height(@base-font-size);
    // ** Decoration ** \\
    background-color: @white;
    border: 1px solid #ddd;
    border-radius: @base-radius;
    .transition(all .2s ease-in-out);
    // ** Layout ** \\
    .img-responsive(inline-block); // Keep them at most 100% wide
    .padding(4);
}


/**
 * List Type Classes
 */
.list-unstyled { 
    list-style: none; 
    ul,ol { list-style: none; }
}
.list-inline {
    .list-unstyled();
    > li {
        display: inline-block;
        .padding-left(@quarter-spacing-unit);
        .padding-right(@quarter-spacing-unit);
    }
    @media (min-width: @medium) {
        /**
         * Inline Description Lists
         * Defaults to being stacked without any of the below styles applied, until the
         * grid breakpoint is reached (default of ~768px).
         */
        dt {
            // ** Text ** \\
            text-align: right;
            .text-overflow();
            // ** Layout ** \\
            clear: left;
            float: left;
            margin-top: 0;
            width: (160px);
        }
        dd {
            .margin-bottom(@half-spacing-unit);
            margin-left: 180px;
            .clearfix(); // Clear the floated `dt` if an empty `dd` is present
        }
    }
}


/**
 * Table Type Classes
 */
.table-striped > tbody > tr:nth-child(even) { > td, > th { background-color: #f9f9f9; } }
.table-hover > tbody > tr:hover { > td, > th { background-color: #f5f5f5; } }
.table-condensed {
    > thead,
    > tbody,
    > tfoot {
        > tr {
            > th,
            > td { .padding(@quarter-spacing-unit); }
        }
    }
}
.table-bordered {
    border: 1px solid #ddd;
    > thead,
    > tbody,
    > tfoot {
        > tr {
            > th,
            > td { border: 1px solid #ddd; }
        }
    }
    > thead > tr {
        > th,
        > td { border-bottom-width: 2px; }
    }

    border-radius: 0;
    > thead {
        th:first-child { border-top-left-radius: 0; }
        th:last-child { border-top-right-radius: 0; }
    }
}

/**
 * Form Inline Class
 * 
 * Make forms appear inline(-block) by adding the `.form-inline` class. Inline
 * forms begin stacked on extra small (mobile) devices and then go inline when
 * viewports reach <768px.
 * 
 * Requires wrapping inputs and labels with `.form-group` for proper display of
 * default HTML form controls.
 */
.form-group { .margin-bottom(@half-spacing-unit); }
.form-inline {
    @media (min-width: @medium) {
        // Inline-block all the things for "inline"
        .form-group {
            // ** Text ** \\
            vertical-align: middle;
            // ** Layout ** \\
            display: inline-block;
            margin-bottom: 0;
            .margin-left(@eighth-spacing-unit);
            .margin-right(@eighth-spacing-unit);

            &:first-child { margin-left: 0; }
        }
        // Remove default margin on radios/checkboxes that were used for stacking, and
        // then undo the floating of radios and checkboxes to match (which also avoids
        // a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
        .radio,
        .checkbox {
            display: inline-block;
            .margin(0, @eighth-spacing-unit);
            padding-left: 0;
        }

        .radio input[type="radio"],
        .checkbox input[type="checkbox"] {
            float: none;
            margin-left: 0;
            top: 0;
        }

        .btn{ 
            .margin-left(@eighth-spacing-unit);
            .margin-right(@eighth-spacing-unit);
        }
    }
}

/**
 * grid-paint Class
 * 
 * use on grid unit to color it
 */
.grid-paint {
    /* Decoration */
    background-color: #4a8ec2;
    border-radius: @base-radius;
    color: #fff;
    /* Layout */
    .padding(@half-spacing-unit);
}

/**
 * Hide Content
 */
.hidden             { .hidden(); }

/**
 * Responsive Visibility Classes
 */
.visible-s {
    .responsive-invisibility();
    @media (max-width: @small - 1) { .responsive-visibility(); }

    &.visible-m { 
        @media (min-width: @medium) and (max-width: @medium - 1) { .responsive-visibility(); } 
    }

    &.visible-l { 
        @media (min-width: @large) and (max-width: @large - 1) { .responsive-visibility(); } 
    }

    &.visible-w { 
        @media (min-width: @wide) { .responsive-visibility(); } 
    }
}

.visible-m {
    .responsive-invisibility();

    &.visible-s { 
        @media (min-width: @small) and (max-width: @small - 1) { .responsive-visibility(); } 
    }

    @media (max-width: @medium - 1) { .responsive-visibility(); }

    &.visible-l { 
        @media (min-width: @large) and (max-width: @large - 1) { .responsive-visibility(); } 
    }

    &.visible-w { 
        @media (min-width: @wide) { .responsive-visibility(); } 
    }
}

.visible-l {
    .responsive-invisibility();

    &.visible-s { 
        @media (min-width: @small) and (max-width: @small - 1) { .responsive-visibility(); } 
    }

    &.visible-m { 
        @media (min-width: @medium) and (max-width: @medium - 1) { .responsive-visibility(); } 
    }

    @media (max-width: @large - 1) { .responsive-visibility(); }

    &.visible-w { 
        @media (min-width: @wide) { .responsive-visibility(); } 
    }
}

.visible-w {
    .responsive-invisibility();
    
    &.visible-s { 
        @media (min-width: @small) and (max-width: @small - 1) { .responsive-visibility(); } 
    }

    &.visible-m { 
        @media (min-width: @medium) and (max-width: @medium - 1) { .responsive-visibility(); } 
    }

    &.visible-l { 
        @media (min-width: @large) and (max-width: @large - 1) { .responsive-visibility(); } 
    }

    @media (min-width: @wide - 1) { .responsive-visibility(); }
}

/**
 * Responsive Hidden Classes
 */
.hidden-s {
    .responsive-visibility();

    @media (min-width: @small) and (max-width: @small - 1) { .responsive-invisibility(); }

    &.hidden-m {
        @media (min-width: @medium) and (max-width: @medium - 1) { .responsive-invisibility(); }
    }

    &.hidden-l {
        @media (min-width: @large) and (max-width: @large - 1) { .responsive-invisibility(); }
    }

    &.hidden-w {
        @media (min-width: @wide) { .responsive-invisibility(); }
    }
}

.hidden-m {
    .responsive-visibility();

    &.hidden-s {
        @media (min-width: @small) and (max-width: @small - 1) { .responsive-invisibility(); }
    }

    @media (min-width: @medium) and (max-width: @medium - 1) { .responsive-invisibility(); }

    &.hidden-l {
        @media (min-width: @large) and (max-width: @large - 1) { .responsive-invisibility(); }
    }

    &.hidden-w {
        @media (min-width: @wide) { .responsive-invisibility(); }
    }
}

.hidden-l {
    .responsive-visibility();

    &.hidden-s {
        @media (min-width: @small) and (max-width: @small - 1) { .responsive-invisibility(); }
    }

    &.hidden-m {
        @media (min-width: @medium) and (max-width: @medium - 1) { .responsive-invisibility(); }
    }

    @media (min-width: @large) and (max-width: @large - 1) { .responsive-invisibility(); }

    &.hidden-w {
        @media (min-width: @wide) { .responsive-invisibility(); }
    }
}

.hidden-w {
    .responsive-visibility();

    &.hidden-s {
        @media (min-width: @small) and (max-width: @small - 1) { .responsive-invisibility(); }
    }

    &.hidden-m {
        @media (min-width: @medium) and (max-width: @medium - 1) { .responsive-invisibility(); }
    }

    &.hidden-l {
        @media (min-width: @large) and (max-width: @large - 1) { .responsive-invisibility(); }
    }

    @media (min-width: @wide) { .responsive-invisibility(); }
}

/**
 * Print Classes
 */
.visible-print { .responsive-invisibility(); }

@media print {
    .visible-print { .responsive-visibility(); }
    .hidden-print { .responsive-invisibility(); }
}
